ЗАДАНИЕ №1
1) :t (('a', 5::Int), "abc"::String, [1.0, 1.2, 3.0]::[Double])

2) :t [(1.0::Double, True, ("abc"::String, 2::Int)), (3.5::Double, True, ("def", 4::Int))]


3) :t ([2::Int, 2::Int], [1.0::Double, 1.0::Double], [(True, 'a'), (False, 'b')])

4) :t [[[(2::Int, True), (2::Int,False)], [(2::Int, True), (2::Int, False)]], [[(2::Int, True),(2::Int, False)], [(2::Int, True),(2::Int, False)]]]

5) :t ((('a','b'),'c'),["abc"::String, "abc"::String])
6) :t (([1.0::Double, 1.0::Double], [True, False]), [2::Int, 2::Int])

7) внутри списка должны быть элементы одного типа - [Integer, (Integer,[Bool])] - невозможно

8) :t (True, ([True, False],[2::Int, 2::Int]))

9) :t [([True, False],[1.0::Double, 1.0::Double]), ([True, True], [1.0::Double, 1.0::Double])]
10) :t [(2::Int, "abc"), (2::Int, "abc")]


ЗАДАНИЕ №2

1) max3 2 (-1) 3

2) min3 1 (-10) 11

3) sort2 7 2

4) :t bothTrue
bothTrue True True
bothTrue False True

5) solve2 (-1) 5
solve2 0 0
solve2 2 1

6) isParallel (1,1) (2,2) (2,0) (4,2)

7) isIncluded (0,0) 5 (0,0) 10
isIncluded (0,0) 5 (0,0) 4

8) isRectangular (0,0) (2,0) (0,2)
isRectangular (0,0) (2,0) (1,2)

9) isTriangle 3 4 5
isTriangle 3 4 10

10) isSorted 1 2 3
isSorted 2 3 1